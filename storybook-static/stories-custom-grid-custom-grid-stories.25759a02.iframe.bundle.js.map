{"version":3,"file":"stories-custom-grid-custom-grid-stories.25759a02.iframe.bundle.js","mappings":";;;;;;;;AAkCA;;;;;AAOA;;;;;;;AA+FA;;;AA1DA;;;AAwBA;;;AAyBA","sources":["webpack://react-hexgrid/./src/stories/custom-grid/custom-grid.stories.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { ComponentStory, ComponentMeta } from \"@storybook/react\"\nimport {\n  HexGrid,\n  Layout,\n  Hexagon as H,\n  GridGenerator,\n  Text as T,\n  Path as P,\n  Pattern,\n  Hex,\n} from \"../..\"\nimport { css, jsx } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\n\nexport default {\n  title: \"CustomGrid\",\n  component: HexGrid,\n  argTypes: {},\n} as ComponentMeta<typeof H>\n\nconst hexagonSize = { x: 10, y: 10 }\nconst moreHexas = GridGenerator.parallelogram(-2, 2, -2, 2)\n\nconst Hexagon = styled(H)`\n  stroke: #7be3f6;\n  stroke-width: 0.2;\n  transition: fill-opacity 0.5s;\n  &:hover {\n    fill: #7be3f6;\n    fill-opacity: 0.7;\n  }\n`\n\nconst Text = styled(T)`\n  font-size: 0.22em;\n  fill: white;\n  fill-opacity: 0.7;\n  transition: fill-opacity 0.5s;\n`\n\nconst Path = styled(P)`\n  fill: none;\n  stroke: #7be3f6;\n  stroke-width: 0.2em;\n  stroke-opacity: 0.7;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n`\n\nconst Template: ComponentStory<typeof H> = (args, { argTypes }) => {\n  return (\n    <div\n      style={{\n        background: \"#133b43\",\n        color: \"white\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      <h2>React Hexgrid v1</h2>\n      <p>\n        Constructing Hexgrid with component-based approach with custom SVG\n        elements.\n      </p>\n      <HexGrid width={1200} height={800} viewBox=\"-50 -50 100 100\">\n        {/* Main grid with bit hexagons, all manual */}\n        <Layout\n          size={hexagonSize}\n          flat={true}\n          spacing={1.1}\n          origin={{ x: 0, y: 0 }}\n          css={css`\n            fill: #4499a9;\n            fill-opacity: 0.6;\n          `}\n        >\n          <Hexagon q={0} r={0} s={0} />\n          {/* Using pattern (defined below) to fill the hexagon */}\n          <Hexagon q={0} r={-1} s={1} fill=\"pat-1\" />\n          <Hexagon q={0} r={1} s={-1} />\n          <Hexagon q={1} r={-1} s={0}>\n            <Text>1, -1, 0</Text>\n          </Hexagon>\n          <Hexagon q={1} r={0} s={-1}>\n            <Text>1, 0, -1</Text>\n          </Hexagon>\n          {/* Pattern and text */}\n          <Hexagon q={-1} r={1} s={0} fill=\"pat-2\">\n            <Text>-1, 1, 0</Text>\n          </Hexagon>\n          <Hexagon q={-1} r={0} s={1} />\n          <Hexagon q={-2} r={0} s={1} />\n          <Path start={new Hex(0, 0, 0)} end={new Hex(-2, 0, 1)} />\n        </Layout>\n        {/* Additional small grid, hexagons generated with generator */}\n        <Layout\n          css={css`\n            fill: #4499a9;\n            fill-opacity: 0.6;\n          `}\n          size={{ x: 2, y: 2 }}\n          origin={{ x: 50, y: -30 }}\n        >\n          {moreHexas.map((hex, i) => (\n            <Hexagon key={i} q={hex.q} r={hex.r} s={hex.s} />\n          ))}\n        </Layout>\n        {/* You can define multiple patterns and switch between them with \"fill\" prop on Hexagon */}\n        <Pattern\n          id=\"pat-1\"\n          link=\"https://picsum.photos/id/1048/100\"\n          size={hexagonSize}\n        />\n        <Pattern\n          id=\"pat-2\"\n          link=\"https://picsum.photos/id/1051/100\"\n          //   link=\"http://lorempixel.com/400/400/cats/2/\"\n          size={hexagonSize}\n        />\n        <g\n          css={css`\n            fill: #4499a9;\n            fill-opacity: 0.6;\n          `}\n        >\n          <circle cx=\"50\" cy=\"0\" r=\"10\" />\n          <circle cx=\"50\" cy=\"10\" r=\"8\" />\n          <circle cx=\"45\" cy=\"20\" r=\"6\" />\n        </g>\n      </HexGrid>\n    </div>\n  )\n}\n\nexport const Default = Template.bind({})\n"],"names":[],"sourceRoot":""}