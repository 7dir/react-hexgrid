"use strict";(self.webpackChunkreact_hexgrid=self.webpackChunkreact_hexgrid||[]).push([[671],{"./src/stories/pattern-swap/pattern-swap.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/index.ts"),_emotion_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");const __WEBPACK_DEFAULT_EXPORT__={title:"PatternSwap",component:___WEBPACK_IMPORTED_MODULE_1__.NJ},initialHexagons=___WEBPACK_IMPORTED_MODULE_1__.Qo.hexagon(2);initialHexagons.forEach((hex=>{hex.pattern="pattern1"}));const Default=((args,{argTypes})=>{const[hexagons,setHexagons]=react__WEBPACK_IMPORTED_MODULE_0__.useState(initialHexagons);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{css:_emotion_react__WEBPACK_IMPORTED_MODULE_2__.iv`
        margin: 0;
        padding: 1em;
        font-family: sans-serif;
        background: #133b43;
        color: white;
        text-align: center;
      `},react__WEBPACK_IMPORTED_MODULE_0__.createElement("h2",{css:_emotion_react__WEBPACK_IMPORTED_MODULE_2__.iv`
          font-size: 32px;
        `},"Hexagon Pattern Swap"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("p",null,"Click a tile to swap it's pattern"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.e1,{width:1200,height:800},react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.Ar,{size:{x:10,y:10},flat:!1,spacing:1.1,origin:{x:0,y:0}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,hexagons.map(((hex,i)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.NJ,{css:_emotion_react__WEBPACK_IMPORTED_MODULE_2__.iv`
                  fill: #4499a9;
                  fill-opacity: 0.6;

                  &:hover {
                    fill: #7be3f6;
                    fill-opacity: 0.9;
                  }
                  polygon {
                    stroke: #7be3f6;
                    stroke-width: 0.2;
                    transition: fill-opacity 0.5s;
                  }
                `,key:i,q:hex.q,r:hex.r,s:hex.s,fill:hex.pattern,onClick:(event,source)=>{const hexas=hexagons.map((hex=>(___WEBPACK_IMPORTED_MODULE_1__.pb.equals(source.state.hex,hex)&&(hex.pattern="pattern1"===source.props?.fill?"pattern2":"pattern1"),hex)));setHexagons([...hexas])}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.xv,{css:_emotion_react__WEBPACK_IMPORTED_MODULE_2__.iv`
                    font-size: 0.17em;
                    fill: white;
                    fill-opacity: 0.7;
                    transition: fill-opacity 0.5s;
                    &:hover {
                      fill-opacity: 1;
                    }
                  `},___WEBPACK_IMPORTED_MODULE_1__.pb.getID(hex)))))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.cf,{id:"pattern1",link:"https://picsum.photos/200?image=80"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.cf,{id:"pattern2",link:"https://picsum.photos/200?image=82"}))))}).bind({}),__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => {\n  const [hexagons, setHexagons] = React.useState(initialHexagons);\n  return <div css={css`\n        margin: 0;\n        padding: 1em;\n        font-family: sans-serif;\n        background: #133b43;\n        color: white;\n        text-align: center;\n      `}>\n      <h2 css={css`\n          font-size: 32px;\n        `}>\n        Hexagon Pattern Swap\n      </h2>\n      <p>Click a tile to swap it\'s pattern</p>\n      <HexGrid width={1200} height={800}>\n        <Layout size={{\n        x: 10,\n        y: 10\n      }} flat={false} spacing={1.1} origin={{\n        x: 0,\n        y: 0\n      }}>\n          <>\n            {hexagons.map((hex, i) => <Hexagon css={css`\n                  fill: #4499a9;\n                  fill-opacity: 0.6;\n\n                  &:hover {\n                    fill: #7be3f6;\n                    fill-opacity: 0.9;\n                  }\n                  polygon {\n                    stroke: #7be3f6;\n                    stroke-width: 0.2;\n                    transition: fill-opacity 0.5s;\n                  }\n                `} key={i} q={hex.q} r={hex.r} s={hex.s}\n          /* Here we pass the pattern which we want to display */ fill={hex.pattern}\n          /* onClick event gets back 2 properties: event and source (hexagon) */ onClick={(event, source) => {\n            // Get our hexagon data\n            // Go through all of our hexagons and update patterns\n            const hexas = hexagons.map(hex => {\n              // Switch pattern only for the hexagon that was clicked\n              if (HexUtils.equals(source.state.hex, hex)) {\n                // Assign new pattern to _our_ data\n                hex.pattern = source.props?.fill === "pattern1" ? "pattern2" : "pattern1";\n              }\n              return hex;\n            });\n            setHexagons([...hexas]);\n          }}>\n                <Text css={css`\n                    font-size: 0.17em;\n                    fill: white;\n                    fill-opacity: 0.7;\n                    transition: fill-opacity 0.5s;\n                    &:hover {\n                      fill-opacity: 1;\n                    }\n                  `}>\n                  {HexUtils.getID(hex)}\n                </Text>\n                {/* <Text>{hex.pattern}</Text> */}\n              </Hexagon>)}\n          </>\n          <Pattern id="pattern1" link="https://picsum.photos/200?image=80" />\n          <Pattern id="pattern2" link="https://picsum.photos/200?image=82" />\n        </Layout>\n      </HexGrid>\n    </div>;\n}',...Default.parameters?.docs?.source}}}}}]);
//# sourceMappingURL=stories-pattern-swap-pattern-swap-stories.8b08e7b7.iframe.bundle.js.map