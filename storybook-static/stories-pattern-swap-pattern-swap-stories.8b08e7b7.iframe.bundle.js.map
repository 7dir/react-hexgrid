{"version":3,"file":"stories-pattern-swap-pattern-swap-stories.8b08e7b7.iframe.bundle.js","mappings":";;;;;;;AAqCA;;AAIA;;;;;;;;;;;;;AA4BA;;;;;;;;AAqCA","sources":["webpack://react-hexgrid/./src/stories/pattern-swap/pattern-swap.stories.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { ComponentStory, ComponentMeta } from \"@storybook/react\"\nimport {\n  HexGrid,\n  Layout,\n  Hexagon,\n  GridGenerator,\n  Pattern,\n  Text,\n  HexUtils,\n} from \"../..\"\nimport { css, jsx } from \"@emotion/react\"\n\nexport default {\n  title: \"PatternSwap\",\n  component: Hexagon,\n} as ComponentMeta<typeof Hexagon>\n\nconst initialHexagons = GridGenerator.hexagon(2)\n// Set additional data for hexagons\ninitialHexagons.forEach((hex) => {\n  hex.pattern = \"pattern1\"\n})\n\nconst Template: ComponentStory<typeof Hexagon> = (args, { argTypes }) => {\n  const [hexagons, setHexagons] = React.useState(initialHexagons)\n  return (\n    <div\n      css={css`\n        margin: 0;\n        padding: 1em;\n        font-family: sans-serif;\n        background: #133b43;\n        color: white;\n        text-align: center;\n      `}\n    >\n      <h2\n        css={css`\n          font-size: 32px;\n        `}\n      >\n        Hexagon Pattern Swap\n      </h2>\n      <p>Click a tile to swap it's pattern</p>\n      <HexGrid width={1200} height={800}>\n        <Layout\n          size={{ x: 10, y: 10 }}\n          flat={false}\n          spacing={1.1}\n          origin={{ x: 0, y: 0 }}\n        >\n          <>\n            {hexagons.map((hex, i) => (\n              <Hexagon\n                css={css`\n                  fill: #4499a9;\n                  fill-opacity: 0.6;\n\n                  &:hover {\n                    fill: #7be3f6;\n                    fill-opacity: 0.9;\n                  }\n                  polygon {\n                    stroke: #7be3f6;\n                    stroke-width: 0.2;\n                    transition: fill-opacity 0.5s;\n                  }\n                `}\n                key={i}\n                q={hex.q}\n                r={hex.r}\n                s={hex.s}\n                /* Here we pass the pattern which we want to display */\n                fill={hex.pattern}\n                /* onClick event gets back 2 properties: event and source (hexagon) */\n                onClick={(event, source) => {\n                  // Get our hexagon data\n                  // Go through all of our hexagons and update patterns\n                  const hexas = hexagons.map((hex) => {\n                    // Switch pattern only for the hexagon that was clicked\n                    if (HexUtils.equals(source.state.hex, hex)) {\n                      // Assign new pattern to _our_ data\n                      hex.pattern =\n                        source.props?.fill === \"pattern1\"\n                          ? \"pattern2\"\n                          : \"pattern1\"\n                    }\n\n                    return hex\n                  })\n\n                  setHexagons([...hexas])\n                }}\n              >\n                <Text\n                  css={css`\n                    font-size: 0.17em;\n                    fill: white;\n                    fill-opacity: 0.7;\n                    transition: fill-opacity 0.5s;\n                    &:hover {\n                      fill-opacity: 1;\n                    }\n                  `}\n                >\n                  {HexUtils.getID(hex)}\n                </Text>\n                {/* <Text>{hex.pattern}</Text> */}\n              </Hexagon>\n            ))}\n          </>\n          <Pattern id=\"pattern1\" link=\"https://picsum.photos/200?image=80\" />\n          <Pattern id=\"pattern2\" link=\"https://picsum.photos/200?image=82\" />\n        </Layout>\n      </HexGrid>\n    </div>\n  )\n}\n\nexport const Default = Template.bind({})\n"],"names":[],"sourceRoot":""}