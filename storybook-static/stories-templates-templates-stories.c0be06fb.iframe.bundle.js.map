{"version":3,"file":"stories-templates-templates-stories.c0be06fb.iframe.bundle.js","mappings":";;;;;AAuCA;;;;;;;;;;;;;;;;;;;AA2CA","sources":["webpack://react-hexgrid/./src/stories/templates/templates.stories.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { ComponentStory, ComponentMeta } from \"@storybook/react\"\nimport {\n  HexGrid,\n  Layout,\n  Hexagon,\n  GridGenerator,\n  Text,\n  HexUtils,\n  Hex,\n} from \"../..\"\nimport { configurations } from \"./configurations\"\nimport { css } from \"@emotion/react\"\n\nexport default {\n  title: \"Templates\",\n  component: Hexagon,\n} as ComponentMeta<typeof Hexagon>\n\nconst initialConfig = configurations[\"hexagon\"]\nconst generator = GridGenerator.getGenerator(initialConfig.map)\n\nconst initialHexagons: Hex[] = generator(initialConfig.mapProps)\n\nconst Template: ComponentStory<typeof Hexagon> = (args, { argTypes }) => {\n  const [hexagons, setHexagons] = React.useState(initialHexagons)\n  const [config, setConfig] = React.useState<any>(initialConfig)\n\n  const layout = config.layout\n  const size = { x: layout.width, y: layout.height }\n  return (\n    <div\n      css={css`\n        margin: 0;\n        padding: 1em;\n        font-family: sans-serif;\n        background: #f0f0f0;\n      `}\n    >\n      <h2>Select grid type and configuration from dropdown.</h2>\n      <div>\n        <strong>Template: </strong>\n        <select\n          onChange={(event) => {\n            const name = event.currentTarget.value\n            const config = configurations[name]\n            const generator = GridGenerator.getGenerator(config.map)\n            const hexagons = generator.apply(this, config.mapProps)\n            setConfig(config)\n            setHexagons(hexagons)\n          }}\n        >\n          {Object.keys(configurations).map((type) => (\n            <option value={type}>{type}</option>\n          ))}\n        </select>\n      </div>\n      <hr />\n      <HexGrid\n        width={config.width}\n        height={config.height}\n        css={css`\n          g {\n            fill: #3f51b5;\n            fill-opacity: 0.6;\n            &:hover {\n              fill-opacity: 1;\n            }\n            text {\n              font-size: 0.2em;\n              fill: #000;\n              fill-opacity: 0.9;\n              transition: fill-opacity 0.2s;\n            }\n            polygon {\n              stroke: #3f51b5;\n              stroke-width: 0.2;\n              transition: fill-opacity 0.2s;\n            }\n          }\n        `}\n      >\n        <Layout\n          size={size}\n          flat={layout.flat}\n          spacing={layout.spacing}\n          origin={config.origin}\n        >\n          {\n            // note: key must be unique between re-renders.\n            // using config.mapProps+i makes a new key when the goal template chnages.\n            hexagons.map((hex, i) => (\n              <Hexagon key={config.mapProps + i} q={hex.q} r={hex.r} s={hex.s}>\n                <Text>{HexUtils.getID(hex)}</Text>\n              </Hexagon>\n            ))\n          }\n        </Layout>\n      </HexGrid>\n    </div>\n  )\n}\n\nexport const Default = Template.bind({})\n"],"names":[],"sourceRoot":""}