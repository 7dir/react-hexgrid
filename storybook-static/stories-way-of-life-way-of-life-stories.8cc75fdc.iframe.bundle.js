"use strict";(self.webpackChunkreact_hexgrid=self.webpackChunkreact_hexgrid||[]).push([[577],{"./src/stories/way-of-life/way-of-life.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>way_of_life_stories});var react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./src/index.ts"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");const esm_useInterval=function(callback,delay){var savedCallback=(0,react.useRef)((function(){}));(0,react.useEffect)((function(){savedCallback.current=callback})),(0,react.useEffect)((function(){if(null!==delay){var interval_1=setInterval((function(){return savedCallback.current()}),delay||0);return function(){return clearInterval(interval_1)}}}),[delay])};var colors=__webpack_require__("./src/stories/colors.tsx");const way_of_life_stories={title:"Way of life",component:src.NJ};function way_of_life_stories_reset(){const initialHexagons=src.Qo.hexagon(8),dict={};return initialHexagons.map((({q,r,s})=>({q,r,s,state:Math.random()<.4&&src.pb.distance({q,r,s},{q:0,r:0,s:0})<=3?"Living":"Dead"}))).forEach((hex=>{const{q,r,s}=hex;dict[`${q}-${r}-${s}`]=hex})),dict}function countLivingNeighbors(hex,dict){const neighbors=function getNeighbors(hex,dict){return src.pb.neighbors(hex).map((({q,r,s})=>dict[`${q}-${r}-${s}`])).filter((v=>Boolean(v)))}(hex,dict);return neighbors.reduce(((v1,v2)=>v1+("Living"===v2.state?1:0)),0)}const way_of_life_stories_colors=[colors.D.teal],size={x:2.7,y:2.7},Default=((args,{argTypes})=>{const[hexagons,setHexagons]=react.useState({});react.useEffect((()=>{const hexas=way_of_life_stories_reset();setHexagons(hexas)}),[]);const[step,setI]=react.useState(0),[speed,setSpeed]=react.useState(20),timing=speed/20;esm_useInterval((()=>{const result={};Object.keys(hexagons).forEach((coords=>{const element=hexagons[coords],{q,r,s,state}=element;let livingNeighbors=countLivingNeighbors(element,hexagons);result[`${q}-${r}-${s}`]=2==livingNeighbors?{...element,state:"Living"}:{...element,state:"Dead"}})),setHexagons(result),setI(step+1)}),1e3*timing);const timingFunctionDying=`fill ${1.5*timing}s cubic-bezier(0.7, 0.8, 0.9, 1)`,timingFunctionReviving=`fill ${.8*timing}s cubic-bezier(0.2, 0.5, 0.9, 1)`;return react.createElement("div",{style:{background:colors.D.gray[1]},css:emotion_react_browser_esm.iv`
        margin: 0;
        padding: 1em;
        font-family: sans-serif;
      `},react.createElement("div",null,react.createElement("p",null,react.createElement("b",null,"Living cells: "),"Each cell with one or no neighbors dies from isolation. Each cell with three or more neighbors dies from overpopulation. Only the cells with two neighbors survive."),react.createElement("p",null,react.createElement("b",null,"Dead cells:")," Each cell with two neighbors revives.")),react.createElement("div",null,react.createElement("button",{onClick:()=>{const newGrid=way_of_life_stories_reset();setHexagons(newGrid)}},"Reset")," ",react.createElement("button",{onClick:()=>setSpeed(speed+1)},"-")," ",react.createElement("button",{onClick:()=>setSpeed(Math.max(speed-1,1))},"+")," ","speed: ",speed),react.createElement(src.e1,{width:800,height:800,viewBox:"-40 -40 100 100"},react.createElement(src.Ar,{size,flat:!0,spacing:1},Object.keys(hexagons).map((v=>hexagons[v])).map(((hex,i)=>react.createElement(src.NJ,{key:i,q:hex.q,r:hex.r,s:hex.s,css:emotion_react_browser_esm.iv`
                  g {
                    polygon {
                      fill: ${"Dead"===hex.state?colors.D.gray[src.pb.distance(hex,{q:0,r:0,s:0})%4]:way_of_life_stories_colors[step%way_of_life_stories_colors.length][5+src.pb.distance(hex,{q:0,r:0,s:0})%3]};
                      stroke: ${colors.D.dark[4]};
                      stroke-opacity: ${.6/src.pb.distance(hex,{q:0,r:0,s:0})};
                      stroke-width: 0.15;
                      transition: ${"Dead"===hex.state?timingFunctionDying:timingFunctionReviving};
                    }
                  }
                `}))))))}).bind({}),__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'(args, {\n  argTypes\n}) => {\n  const [hexagons, setHexagons] = React.useState<CellDict>({});\n  React.useEffect(() => {\n    const hexas = reset();\n    setHexagons(hexas);\n  }, []);\n  const [step, setI] = React.useState(0);\n  const [speed, setSpeed] = React.useState(20);\n  const timing = speed / 20.0;\n  useInterval(() => {\n    const result: CellDict = {};\n    Object.keys(hexagons).forEach(coords => {\n      const element = hexagons[coords];\n      const {\n        q,\n        r,\n        s,\n        state\n      } = element;\n      let livingNeighbors = countLivingNeighbors(element, hexagons);\n      if (livingNeighbors == 2) {\n        result[`${q}-${r}-${s}`] = {\n          ...element,\n          state: "Living"\n        };\n      } else {\n        result[`${q}-${r}-${s}`] = {\n          ...element,\n          state: "Dead"\n        };\n      }\n    });\n    setHexagons(result);\n    setI(step + 1);\n  }, timing * 1000);\n  const dyingAnimationDuration = timing * 1.5;\n  const revivingAnimationDuration = timing * 0.8;\n  const timingFunctionDying = `fill ${dyingAnimationDuration}s cubic-bezier(0.7, 0.8, 0.9, 1)`;\n  const timingFunctionReviving = `fill ${revivingAnimationDuration}s cubic-bezier(0.2, 0.5, 0.9, 1)`;\n  return <div style={{\n    background: COLORS.gray[1]\n  }} css={css`\n        margin: 0;\n        padding: 1em;\n        font-family: sans-serif;\n      `}>\n      <div>\n        <p>\n          <b>Living cells: </b>\n          Each cell with one or no neighbors dies from isolation. Each cell with\n          three or more neighbors dies from overpopulation. Only the cells with\n          two neighbors survive.\n        </p>\n        <p>\n          <b>Dead cells:</b> Each cell with two neighbors revives.\n        </p>\n      </div>\n      <div>\n        <button onClick={() => {\n        const newGrid = reset();\n        setHexagons(newGrid);\n      }}>\n          Reset\n        </button>{" "}\n        <button onClick={() => setSpeed(speed + 1)}>-</button>{" "}\n        <button onClick={() => setSpeed(Math.max(speed - 1, 1))}>+</button>{" "}\n        speed: {speed}\n      </div>\n      <HexGrid width={800} height={800} viewBox="-40 -40 100 100">\n        <Layout size={size} flat={true} spacing={1}>\n          {Object.keys(hexagons).map(v => hexagons[v]).map((hex, i) => <Hexagon key={i} q={hex.q} r={hex.r} s={hex.s} css={css`\n                  g {\n                    polygon {\n                      fill: ${hex.state === "Dead" ? COLORS.gray[HexUtils.distance(hex, {\n          q: 0,\n          r: 0,\n          s: 0\n        }) % 4] : colors[step % colors.length][5 + HexUtils.distance(hex, {\n          q: 0,\n          r: 0,\n          s: 0\n        }) % 3]};\n                      stroke: ${COLORS.dark[4]};\n                      stroke-opacity: ${0.6 / HexUtils.distance(hex, {\n          q: 0,\n          r: 0,\n          s: 0\n        })};\n                      stroke-width: 0.15;\n                      transition: ${hex.state === "Dead" ? timingFunctionDying : timingFunctionReviving};\n                    }\n                  }\n                `} />)}\n        </Layout>\n      </HexGrid>\n    </div>;\n}',...Default.parameters?.docs?.source}}}},"./src/stories/colors.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>COLORS});const COLORS={dark:["#C1C2C5","#A6A7AB","#909296","#5c5f66","#373A40","#2C2E33","#25262b","#1A1B1E","#141517","#101113"],gray:["#f8f9fa","#f1f3f5","#e9ecef","#dee2e6","#ced4da","#adb5bd","#868e96","#495057","#343a40","#212529"],red:["#fff5f5","#ffe3e3","#ffc9c9","#ffa8a8","#ff8787","#ff6b6b","#fa5252","#f03e3e","#e03131","#c92a2a"],pink:["#fff0f6","#ffdeeb","#fcc2d7","#faa2c1","#f783ac","#f06595","#e64980","#d6336c","#c2255c","#a61e4d"],grape:["#f8f0fc","#f3d9fa","#eebefa","#e599f7","#da77f2","#cc5de8","#be4bdb","#ae3ec9","#9c36b5","#862e9c"],violet:["#f3f0ff","#e5dbff","#d0bfff","#b197fc","#9775fa","#845ef7","#7950f2","#7048e8","#6741d9","#5f3dc4"],indigo:["#edf2ff","#dbe4ff","#bac8ff","#91a7ff","#748ffc","#5c7cfa","#4c6ef5","#4263eb","#3b5bdb","#364fc7"],blue:["#e7f5ff","#d0ebff","#a5d8ff","#74c0fc","#4dabf7","#339af0","#228be6","#1c7ed6","#1971c2","#1864ab"],cyan:["#e3fafc","#c5f6fa","#99e9f2","#66d9e8","#3bc9db","#22b8cf","#15aabf","#1098ad","#0c8599","#0b7285"],teal:["#e6fcf5","#c3fae8","#96f2d7","#63e6be","#38d9a9","#20c997","#12b886","#0ca678","#099268","#087f5b"],green:["#ebfbee","#d3f9d8","#b2f2bb","#8ce99a","#69db7c","#51cf66","#40c057","#37b24d","#2f9e44","#2b8a3e"],lime:["#f4fce3","#e9fac8","#d8f5a2","#c0eb75","#a9e34b","#94d82d","#82c91e","#74b816","#66a80f","#5c940d"],yellow:["#fff9db","#fff3bf","#ffec99","#ffe066","#ffd43b","#fcc419","#fab005","#f59f00","#f08c00","#e67700"],orange:["#fff4e6","#ffe8cc","#ffd8a8","#ffc078","#ffa94d","#ff922b","#fd7e14","#f76707","#e8590c","#d9480f"]}}}]);
//# sourceMappingURL=stories-way-of-life-way-of-life-stories.8cc75fdc.iframe.bundle.js.map